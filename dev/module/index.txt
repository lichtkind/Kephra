Module prototypes are the place to develope libraries (internal API's).
Several connected libraries can be joined in one proto module (separated by ---).
Latest copies of all necessary libraries are copied into a proto before dev takes place.

design of the API's is done in: dev/overview
relation between different types of protos: dev/roadmap.txt
our development model in more details: doc/CompleteProgramming.pod

--------------------------------------------------------------------------------
   K ~~ Kephra                            C = Complete
      B ~~ Base                           .P = Partially there, nothing missing now (or only tests)
        C ~~ Class                        . S = Small feature missing
                                          .  U = Usable
                                          .   M = Major feature missing
                                          .    B = Buggy/old Deprecated code
                                          .     I = In Progress (currently worked on)
                                          .      N = Not yet (planned)
--------------------------------------------------------------------------------
   K::B::Package  ......................  C  .....  1.1    low level symbol manipulation
   K::B::Data::Type::Basic  ............  C  .....  1.4    inheritable single value checker
   K::B::Data::Type::Parametric  .......  C  .....  1.31   checks the relation between two values
   K::B::Data::Type::Store  ............  C  .....  1.21   collection of type objects
   K::B::Data::Type::Util  .............  C  .....  1.01   helper functions for type creation
   K::B::Data::Type::Standard  .........  C  .....  2.71   definition of standard types
   K::B::Data::Type  ...................  C  .....  1.2    manage type related symbols
   K::B::Data  .........................  C  .....  0.2    root of none OO data handling
   K::B::Closure  ......................  C  .....  1.1    serializable closure (code and date)
 - K::Base  ............................  C  .....  0.11   root package of self made language extensions
--------------------------------------------------------------------------------
   K::B::C::Definition::Attr.::Data  ...  C  .....  1.22   validate and serialize definition of attribute holding raw data
   K::B::C::Definition::Attr.::Delegating C  .....  1.2    validate and serialize definition of attribute, which is KBOS object
   K::B::C::Definition::Attr.::Wrapping   C  .....  1.1    validate and serialize definition of attribute, which is a none KBOS object
   K::B::C::Definition::Attribute  .....  C  .....  1.0    validate and serialize attribute definition
   K::B::C::Definition::Method::Signature    U      0.0    validate and serialize signature definition
   K::B::C::Definition::Method  ........     U      0.0    validate and serialize method definition
   K::B::C::Definition  ................   PSU      0.7    serializable data set to build a KBOS class from
   K::B::C::Scope  .....................  C         1.5    namespace constants, paths & priority logic
   K::B::C::Instance::Attribute  .......       B N         central store for attribute values
   K::B::C::Instance::Arguments  .......       B N         central store for arguments values
   K::B::C::Instance  ..................       B N         central store 4 object ref (4x self + attr ref)
   K::B::C::Registry  ..................         N         central store 4 class definitions and their instances
   K::B::C::Builder::Attribute  ........       B           create attribute 
   K::B::C::Builder::Method::Arguments         B           create args object
   K::B::C::Builder::Method::Hook              B           method hook handling
   K::B::C::Builder::Method                    B           create regular method
   K::B::C::Builder::Accessor                  B           create accessor method 
   K::B::C::Builder::Constructor               B           create constructor and destructor methods
   K::B::C::Builder                            B           API to class construction
   K::B::C::Syntax::Signature  .........  C         1.0    convert signature string into data for KBC::Def.::Method::Signature object
   K::B::C::Syntax::Parser                       N         define class syntax, API to Keyword::Simple
   K::B::C::Syntax                             N           
 - K::B::Class                           P
--------------------------------------------------------------------------------
================================================================================
 - Kephra::Base::Object
   Kephra::Base::Object::CodeSnippet
   Kephra::Base::Object::Queue
   Kephra::Base::Object::Store

   #B::Call
   #B::Call::Template
   #B::Call::Dynamic
   #B::Call::Dynamic::Template
--------------------------------------------------------------------------------
    I::Message
    I::Message::Channel
 -  I::Message::Net
--------------------------------------------------------------------------------
    I::Event
 -  I::Event::Table
--------------------------------------------------------------------------------
    I::Command
 -  I::Command::Center
--------------------------------------------------------------------------------
    App::Sizer
 -  App::Panel
--------------------------------------------------------------------------------
 -  App::Bar::Tab
