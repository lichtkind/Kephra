use v5.20;
use warnings;

package Kephra::Base::Class::Definition::Attribute;
our $VERSION = 0.5;

use Kephra::Base::Data::Type;
use Kephra::Base::Class::Definition::Attribute::Data;
use Kephra::Base::Class::Definition::Attribute::Delegating;
use Kephra::Base::Class::Definition::Attribute::Wrapping;

sub new {        # ~pkg ~name %properties       --> ._| ~errormsg
    my ($pkg, $name, $attr_def) = (@_);
    return "attribute definition needs an identifier (a-z,a-z0-9_) as first argument" if Kephra::Base::Data::Type::standard->check_basic_type('identifier', $name);
    my ($error_start, $type_def) = ("attribute $name");
    return "$error_start got no property hash to define itself" unless ref $attr_def eq 'HASH';
    return "$error_start needs a descriptive 'help' text of more than 5 character" unless exists $attr_def->{'help'} and length $attr_def->{'help'} > 5;
    $attr_def->{'name'} = $name;
    if    (exists $attr_def->{'delegate'} or exists $attr_def->{'auto_delegate'}) {Kephra::Base::Class::Definition::Attribute::Delegating->new($attr_def)}
    elsif (exists $attr_def->{'get'} or exists $attr_def->{'auto_get'})           {Kephra::Base::Class::Definition::Attribute::Data->new($attr_def)}
    elsif (exists $attr_def->{'wrap'})                                            {Kephra::Base::Class::Definition::Attribute::Wrapping->new($attr_def)}
    else  {return "definition of attribute $name lacks accessor name in get, delegate or wrap property (one only!)"}
}

1;

__END__

attribute name => {help => '',                            # help = long name/description for help messages
                   type => 'name',                        # normal data type or class type, whis is not a class itself
         |         get  => getter_name|[getter_name,..],  # method setter_name gets access to attribute
         |    auto_get  => {name => scope};               # autogenerated getter name
       ?           set  => setter_name|[setter_name,..];  # method setter_name gets access to attribute 
       ?      auto_set  => {name => scope};               # autogenerated setter name
       ?|   init[_lazy] => $val                           # initial value when its different from the type ones
       ?|  build[_lazy] => 'code'                         # code to build default value (optionally lazy) (none lazy can also be done in constructor)

delegating attribute name  => {help => '',                # help = long name/description for help messages
                              class => 'Kephra::...',     # class of attribute (has to be a KBOS class)
                 |         delegate => del_name|[name,..];# delegator method that get access to the attribute
                 |    auto_delegate => {dname => 'scope'} # auto generate method 'self->dname' which maps to 'attr->orig'
                                       {dname => { to => 'orig', scope => 'public'}}
                  ?       auto_get  => {name => scope};   # autogenerated getter name
               ?|       init[_lazy] => [$val]|{attr=>$val}# args to construct attribute object (positional [] or named {}, first is method name)
               ?|      built[_lazy] => ['code']|{a=>'cod'}# eval to build args values

wrapping attribute name => { help  => '',                 # short explaining text for better ~errormsg
                            class  => 'Wx::...',          # class of attribute (can be any perl none KBOS class)
                ?          require => 'Module'            # only if requires different module than ~class
                             wrap  => [wrapper_name,]     # claim this to be implemented wrapper method as belonging to this attribute
                 |    [lazy_]built => 'code'              # code snippets to run (lazily) create $attr object and bring it into init state
