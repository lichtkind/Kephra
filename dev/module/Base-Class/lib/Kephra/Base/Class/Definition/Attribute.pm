use v5.20;
use warnings;

package Kephra::Base::Class::Definition::Attribute;

use Kephra::Base::Class::Definition::Attribute::Data;
use Kephra::Base::Class::Definition::Attribute::Delegator;
use Kephra::Base::Class::Definition::Attribute::Wrapping;

sub new {        # .cdef ~name %properties       --> ~errormsg
    my ($pkg, $name, $attr_def) = (@_);
    return "class $self->{name} is completed, attributes can be added" if $self->is_complete;
    return "attribute definition in class $self->{name} needs a name as first argument" unless defined $name and $name;
    return "attribute name $name is not an identifier (beginning with lower case letter + digits + _)" unless _is_identifier_($name);
    my $error_start = "attribute $name of class $self->{name}";
    return "$error_start got no property hash to define itself" unless ref $attr_def eq 'HASH';
    return "$error_start needs a descriptive 'help' text" unless exists $attr_def->{'help'};
    return "$error_start has no associated getter method" if exists $attr_def->{'set'} and not exists $attr_def->{'get'};
    my $kind = (exists $attr_def->{'get'}) + (exists $attr_def->{'wrap'}) + (exists $attr_def->{'delegate'});
    my $build = (exists $attr_def->{'build'}) + (exists $attr_def->{'build_lazy'}) + (exists $attr_def->{'init'}) + (exists $attr_def->{'init_lazy'});
    return "$error_start needs an associated getter, delegator or wrapper method" if $kind == 0;
    return "$error_start can only have getter or delegator or wrapper" if $kind > 1;
    if (exists $attr_def->{'get'}){
        return "$error_start needs a to refer to a data 'type'" unless exists $attr_def->{'type'};
        return "$error_start can only have one 'init' or 'init_lazy' or 'build' or 'build_lazy' property" if $build > 1;
    } else {
        return "$error_start needs a to refer to a 'class'" unless exists $attr_def->{'class'};
        return "$error_start can only have one 'build' or 'build_lazy' property" if $build > 1;
        if (exists $attr_def->{'wrap'}){
            return "$error_start need to have a 'require' property" unless exists $attr_def->{'require'};
            return "$error_start wraps a none KBOS class and can not an init property " if exists $attr_def->{'init'} or exists $attr_def->{'init_lazy'} ;
        }
    }
    $attr_def->{'name'} = $name;
    $self->{'attribute'}{$name} = $attr_def;
    '';
}


sub get_kind {}
sub get_help {}
sub get_type {}
sub get_init {}
sub get_build {}
sub is_lazy {}
sub accessor_names {}
sub auto_accessors {} # name => scope | [getscope, setscope]
sub get_dependency {}
sub get_requirement {}


1;
__DATA__

attribute name => {help => '',                           # help = long name/description for help messages
                   type => 'name',                       # normal data type or class type, whis is not a class itself
                   get  => setter_name|[setter_name,..], # method setter_name gets access to attribute # -name = autogenerated getter/setter name
         ?         set  => getter_name|[getter_name,..]; # method getter_name gets access to attribute # -name = autogenerated getter/setter name
         ?  init[_lazy] => $val                          # initial value when its different from the type ones
         ? build[_lazy] => 'code'                        # code to build default value (optionally lazy) (none lazy can also be done in constructor)

delegating attribute name  => {help => '',                # help = long name/description for help messages
                              class => 'Kephra::...',     # class of attribute (has to be a KBOS class)
                           delegate => { -dname => 'orig'}# auto generate method 'self->dname' which maps to 'attr->orig'
                                      |[-dname,..]|dname  # without renames
                 ?      init[_lazy] => []|{},             # args to construct attribute object (positional [] or named {}, first is method name)

wrapping attribute name => { help  => '',                 # short explaining text for better ~errormsg
                            class  => 'Kephra::...',      # class of attribute (can be any)
                           require => 'Module'            # 1 if require class
                            wrap   => [wrapper_name,]     # claim this to be implemented wrapper method as belonging to this attribute
                      build[_lazy] => ['code']|{name=>''} # code snippets to run (lazily) create $attr object

