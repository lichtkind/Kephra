use v5.20;
use warnings;

# data structure holding a definition of a KBOS attribute that holds a KBOTS object
# 0103_Base-Class-Definition-Attribute-Delegating.t

package Kephra::Base::Class::Definition::Attribute::Delegating;
our $VERSION = 1.41;
our @ISA = 'Kephra::Base::Class::Definition::Attribute';

sub new {        # ~pkg %attr_def            --> ._ | ~errormsg
    my ($pkg, $attr_def) = (@_);
    my $error_start = "definition of native class attribute";
    my $self = {build => '', lazy => 0};
    return "need a property hash to create a native data attribute definition" unless ref $attr_def eq 'HASH';
    for (qw/name help class/) {
        return "$error_start lacks '$_' property" unless exists $attr_def->{ $_ };
        return "$error_start property '$_' can not be a reference"  if ref $attr_def->{$_};
        return "$error_start property '$_' can not be empty"  unless $attr_def->{$_};
        $error_start .= $attr_def->{'name'} if $_ eq 'name';
        $self->{$_} = delete $attr_def->{$_};
    }
    $self->{'type_class'} = delete $self->{'class'};
    $self->{'lazy'}  = 1 if defined $attr_def->{'lazy_build'} and $attr_def->{'lazy_build'};
    $self->{'build'} = delete $attr_def->{'build'} if defined $attr_def->{'build'};
    $self->{'build'} = delete $attr_def->{'lazy_build'} if defined $attr_def->{'lazy_build'};

    if (defined $attr_def->{'getter'}){
        if (not ref $attr_def->{'getter'}){
            my $scope = delete $attr_def->{'getter'};
            return "$error_start property 'getter' demands unknown scope '$scope' ".
                   "instead of build, access (default), private, public" 
                unless Kephra::Base::Class::Definition::Scope::is_method_scope( $scope );
            $self->{'getter_name'} = $self->{'name'};
            $self->{'getter_scope'} = $scope;
        } elsif (ref $attr_def->{'getter'} eq 'HASH'){
            return "$error_start property 'getter' has too many keys" if keys %{$attr_def->{'getter'}} > 1;
            my ($name) = keys %{$attr_def->{'getter'}};
            my $scope = $attr_def->{'getter'}{$name};
            return "$error_start property 'getter' demands unknown scope '$scope' ".
                    "instead of build, access (default), private, public" 
                unless Kephra::Base::Class::Definition::Scope::is_method_scope( $scope );
            $self->{'getter_name'} = $name;
            $self->{'getter_scope'} = $scope;
            delete $attr_def->{'getter'}
        } else { return "$error_start property 'getter' has to be a name string or hash: {name => 'scope'}"}
    } else {
        $self->{'getter_name'} = $self->{'name'};
        $self->{'getter_scope'} = 'access';
    }

    return "$error_start contains unknown keys: ".join( ' ', (keys %$attr_def)) if %$attr_def;
    $self->{'setter_name'} = '';
    $self->{'setter_scope'} = '';
    $self->{'kind'} = 'delegating';
    bless $self;
}

1;
__END__

delegating attribute  name  => {help => '',                # help = long name/description for help messages
                      class => 'Kephra::...',              # class of attribute (has to be a KBOS class)
       ?|            getter => 'scope',                    # method setter_name gets access to attribute
       ?|            getter => {name => scope};            # autogenerated getter name
       ?| [lazy_]build_args => ['code']|{a=>'cod'}# eval to build args values

required 
   help :  ~      min length 10
  class :  ~      -e
   name :  ~

optional
  getter_name : ~ // name
 getter_scope : 'build' | 'access' | 'private' | 'public' // 'access'
      is_lazy : ? // 0
        build : ~(code) // ''             # create default value (reset)

empty 
  setter_name : ~ // name
 setter_scope : 'build' | 'access' | 'private' | 'public' // 'build'
