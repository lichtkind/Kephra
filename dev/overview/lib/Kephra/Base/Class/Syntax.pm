use v5.16;
use warnings;

package Kephra::Base::Class::Syntax;

use Kephra::Base::Class::Builder;

sub import    {} # establish new keywords
sub unimport  {} # remove them

1;

__END__

class C;                                                # final ; are optional except on class def


type name => {check => sub {$val = @_}, help => 'description what is checked' - parent => type_name, default => val };

relative type name => {check => sub {$val, $obj = @_}, help => '....' -      parent => type_name, default => val };


attribute name => {help => '',                          # help = long name
                   type => 'name',                      # normal data type or class type, whis is not a class itself
                   get  => {settername => scope, ..},   # scope: construct, access, private, public # -name = autogenerated getter/setter name
                   set  => {gettername => scope, ..}};  # scope: construct, access, private, public # -name = autogenerated getter/setter name

delegating attribute name => {help => '',               # help = long name
                              class  => 'Kephra::...',  # class of attribute (has to be a KBOS class)
                delegate =>{dname=>'scope',-name => 'scope'},# methods that have access to atribute # -name = automatically delegated method to attribute
                            dname=>{[rename =>'orig'], scope =>'scope',}                            # redirect method 'dname' of class to method 'orig' of attribute
               [construct => []], [destruct=>{}}]}      # parameter for constructor (hash or array)

wrapping attribute name => {help => '',required =>0|1,  # help = long name ; required by default constructor (when no new method provided)
                            class  => 'Kephra::...',    # class of attribute (can be any)
                            wrap =>{wname=>{ scope =>'scope',}
                            construct => [], destruct=>{}}} # parameter for constructor (hash or array)


constructor new (sig) {@_ = $self, $parameter};         # build method is called by new             # $self has only here access to getter and setter in build scope
destructor demolish (sig) {@_ = $self, $parameter};      # canonical name for destructor method     # called autmatically or by hand                  # build scope


(g|s)etter [method] name (sig) {($self, $args, $attr->get/set/reset) = @};                          # scope determined by attr def
delegator [method] name (sig) {$self, $args, $attribute->attr_method() = @_}
wrapper [method] name (sig) {$self, $args, $attribute->attr_method() = @_}

[multi] method name (sig)  {$self, $parameter = @};     # defaults: public, not multi   # $self has all methods in private (public included) scope 
public [multi] method name (sig) ...                    # same just method,             # ..
private [multi] method name (sig) ...                   # only callable in methods      # ..

                                                        # (sig) = (type parametername,, - type parametername,, --> return type)
                                                        #          required parameter     optional parameter


ACCESS RULES: 

seen in:          any obj ref     inside any    type checker   method new
                  everywhere   method of class    g/setter     & destroy 
normal method
or g/setter set        *              *              *             *
to public scope

private method or                     *              *             *
private g/s

access scope g/s                                     *             *

build scope  g/s                                                   *